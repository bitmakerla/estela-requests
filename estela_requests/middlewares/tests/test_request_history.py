# Generated by CodiumAI
from datetime import timedelta
from unittest.mock import ANY, Mock

import pytest
from estela_queue_adapter.abc_producer import ProducerInterface

from estela_requests.estela_http import EstelaHttpRequest, EstelaResponse
from estela_requests.middlewares.requests_history import RequestsHistoryMiddleware

"""
Code Analysis

Main functionalities:
The RequestsHistoryMiddleware class is responsible for sending requests history to the queue producer. It receives an EstelaHub instance and extracts the necessary information from the EstelaResponse object to create a dictionary containing the request's metadata. This dictionary is then sent to the queue producer.

Methods:
- __init__: initializes the class with a producer, a topic, and metadata.
- from_estela_hub: creates an instance of the class using an EstelaHub instance.
- get_history_data: extracts the necessary information from the EstelaResponse object to create a dictionary containing the request's metadata.
- after_request: sends the dictionary containing the request's metadata to the queue producer.
- before_request, after_session, before_session: empty methods that do not perform any action.

Fields:
- producer: an instance of a ProducerInterface used to send messages to the queue.
- topic: a string representing the topic to which the messages will be sent.
- metadata: a dictionary containing metadata related to the job.
"""
class TestRequestsHistoryMiddleware:
    # Tests that requests history is successfully sent to the queue producer.
    def test_successful_send_request_history(self):
        producer = Mock(spec=ProducerInterface)
        request_obj = Mock(spec=EstelaHttpRequest)
        request_obj.method = "GET"
        middleware = RequestsHistoryMiddleware(producer, 'topic', {'jid': 'job'})
        response = EstelaResponse('url', b'body', 'text', 200, request_obj, 10, 'fingerprint', timedelta(seconds=1))
        middleware.after_request(response)
        # Assert that producer.send was called with the expected arguments
        middleware.producer.send.assert_called_with('topic', {
            'jid': 'job',
            'payload': {
                'url': 'url',
                'status': 200,
                'method': "GET",
                'duration': 1.0,
                'time': ANY,
                'fingerprint': 'fingerprint',
                'response_size': 4
            }
        })

    # Tests that an exception is raised when producer is None.
    def test_producer_is_none(self):
        middleware = RequestsHistoryMiddleware(None, 'topic', {'jid': 'job'})
        request_obj = Mock(spec=EstelaHttpRequest)
        response = EstelaResponse('url', b'body', 'text', 200, request_obj, 10, 'fingerprint', timedelta(seconds=1))
        with pytest.raises(Exception):
            middleware.after_request(response)

    # Tests that an exception is raised when topic is None.
    def test_topic_is_none(self):
        middleware = RequestsHistoryMiddleware('producer', None, {'jid': 'job'})
        request_obj = Mock(spec=EstelaHttpRequest)
        response = EstelaResponse('url', b'body', 'text', 200, request_obj, 10, 'fingerprint', timedelta(seconds=1))
        with pytest.raises(Exception):
            middleware.after_request(response)

    # Tests that an exception is raised when response is None.
    def test_response_is_none(self):
        middleware = RequestsHistoryMiddleware('producer', 'topic', {'jid': 'job'})
        with pytest.raises(Exception):
            middleware.after_request(None)

    # Tests that requests history is sent with empty metadata.
    def test_send_request_history_with_empty_metadata(self):
        producer = Mock(spec=ProducerInterface)
        middleware = RequestsHistoryMiddleware(producer, 'topic', {})
        request_obj = Mock(spec=EstelaHttpRequest)
        request_obj.method = "mock_method"
        response = EstelaResponse('url', b'body', 'text', 200, request_obj, 10, 'fingerprint', timedelta(seconds=1))
        middleware.after_request(response)
        # Assert that producer.send was called with the expected arguments
        middleware.producer.send.assert_called_with('topic', {
            'payload': {
                'url': 'url',
                'status': 200,
                'method': "mock_method",
                'duration': ANY,
                'time': ANY,
                'fingerprint': 'fingerprint',
                'response_size': 4
            }
        })
        # Tests that the method returns a valid dictionary with a valid response object and metadata.
    def test_valid_response(self):
        request_obj = Mock(spec=EstelaHttpRequest)
        request_obj.method = "mock_method"
        producer_mock = Mock(spec=ProducerInterface)
        response = EstelaResponse(
            url='http://example.com',
            body=b'example',
            text='example',
            status_code=200,
            request=request_obj,
            response_size=10,
            fingerprint='example',
            time_in_seconds=timedelta(seconds=1)
        )
        metadata = {'jid': '123'}
        middleware = RequestsHistoryMiddleware(
            producer=producer_mock,
            topic='example_topic',
            metadata=metadata
        )
        expected = {
            **metadata,
            'payload': {
                'url': 'http://example.com',
                'status': 200,
                'method': "mock_method",
                'duration': ANY,
                'time': ANY,
                'fingerprint': 'example',
                'response_size': 7
            }
        }
        assert middleware.get_history_data(response) == expected
